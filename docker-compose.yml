    
services:
  rabbitmq:
    image: rabbitmq:3-management
    container_name: cinema-rabbitmq
    hostname: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
      RABBITMQ_DEFAULT_VHOST: /
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 30s

  rabbitmq-init:
    image: alpine:latest
    container_name: cinema-rabbitmq-init
    depends_on:
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./scripts/rabbitmq-init.sh:/init.sh
    networks:
      - app_network
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_ADMIN_USER: admin
      RABBITMQ_ADMIN_PASS: admin123
    command: >
      sh -c "
        apk add --no-cache curl &&
        sh /init.sh &&
        echo 'Inicialização concluída, saindo...'
      "
    restart: "no"

  mongodb:
    image: mongo:7.0
    container_name: cinema-mongodb
    restart: always
    ports:
      - "27018:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    volumes:
      - mongo_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js
    networks:
      - app_network
    healthcheck:
      test: echo 'db.runCommand("ping").ok'
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: cinema-redis
    restart: always
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass redispassword
    volumes:
      - redis_data:/data
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  cinema-apigateway-api:
    build:
      context: .\Cinema.APIGateway
      dockerfile: src\Cinema.APIGateway.API\Dockerfile
    container_name: cinema-apigateway-api
    ports:
      - "5000:5000"
    environment:
    # RabbitMq
      - RabbitMq__Host=rabbitmq
      - RabbitMq__Port=5672
      - RabbitMq__Username=apigateway_user
      - RabbitMq__Password=apigateway_pass123
      - RabbitMq__QueueCreateEcommerceTicketName=cinema-ecommerce-criacao-ticket
      # EcommerceTicketApi
      - EcommerceTicketApi__BaseUrl=http://cinema-ecommerce-ticket-api:5000/api/
      # CatalogApi
      - CatalogApi__BaseUrl=http://cinema-catalog-api:5000/api/
      # Environment Variables
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=5000
      - ENV=dev
    depends_on:
      rabbitmq-init:
        condition: service_completed_successfully
    networks:
      - app_network

  cinema-ecommerce-ticket-api:
    build:
      context: .\Cinema.EcommerceTicket
      dockerfile: src\Cinema.EcommerceTicket.API\Dockerfile
    container_name: cinema-ecommerce-ticket-api
    ports:
      - "5001:5000"
    environment:
      # RabbitMq
      - RabbitMq__Host=rabbitmq
      - RabbitMq__Port=5672
      - RabbitMq__Username=ecommerce_user
      - RabbitMq__Password=ecommerce_pass123
      - RabbitMq__QueueCreateEcommerceTicketName=cinema-ecommerce-criacao-ticket
      # MongoDb
      - MongoDb__ConnectionString=mongodb://ecommerce_user:ecommerce_mongo_pass123@mongodb:27017/cinema_ecommerce_ticket?authSource=admin&retryWrites=false
      - MongoDb__DatabaseName=cinema_ecommerce_ticket
      - MongoDb__TicketsCollectionName=tickets
      # CatalogApi
      - CatalogApi__BaseUrl=http://cinema-catalog-api:5000/api/
      # Redis
      - Redis__ConnectionString=redis:6379,password=redispassword
      # Environment Variables
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=5000
      - ENV=dev
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq-init:
        condition: service_completed_successfully
    networks:
      - app_network

  cinema-catalog-api:
    build:
      context: .\Cinema.Catalog
      dockerfile: src\Cinema.Catalog.API\Dockerfile
    container_name: cinema-catalog
    ports:
      - "5002:5000"
    environment:
      # TmdbApi
      - TmdbApi__BaseUrl=https://api.themoviedb.org/3/
      - TmdbApi__ApiKey=1f54bd990f1cdfb230adb312546d765d
      - TmdbApi__AuthToken=eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI0ZWQ5Y2E0NTUzZThiZmRmMjk5NjI1ZDI4ZjNlMGM0NCIsIm5iZiI6MTcyODQxODM3OS4zNzk5MjIsInN1YiI6IjY3MDU4Yjc1MDAwMDAwMDAwMDU4NTNiMiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.p-MmF0K7-ku9kDlcyg4Ry8IeQMiufz5zTK-VT5wuOu8
      # Environment Variables
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=5000
      - ENV=dev
    networks:
      - app_network

volumes:
  mongo_data:
  redis_data:

networks:
  app_network:
    driver: bridge